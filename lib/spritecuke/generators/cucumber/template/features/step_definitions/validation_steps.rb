################################################################################
# Copyright <%= config[:year] %> spriteCloud B.V. All rights reserved.
# Generated by spritecuke, version <%= config[:spritecuke][:version] %>
# Author: "<%= config[:user] %>" <<%= config[:email] %>>

require 'spritecuke'



################################################################################
# Link validators

Then /^I should see a link with title "([^"]*)"$/ do |arg1|
	$BROWSER.link(:title => arg1).should exist
end

Then /^I should see link "([^"]*)"$/ do |arg1|
  wait_until_text_found(arg1, 5)
	
  link_visible = false
  links = $BROWSER.as(:text => arg1)
  links.each do |link|
    if link.visible?
      link_visible = true
      break
    end
  end
  
  #Try case insensitive
  if !link_visible
    links = $BROWSER.as(:text => /#{arg1}/i)
    links.each do |link|
      if link.visible?
        p "DEBUG:\nExpected: '#{arg1}'\nFound: '#{link.text}' (different capitals)"
        link_visible = true
        break
      end
    end
  end
  
  handle_element_not_found("link", arg1) unless link_visible
end

Then /^I should not see link "([^"]*)"$/ do |arg1|
	if $BROWSER.link(:text => arg1).exist? and $BROWSER.link(:text => arg1).visible?
    handle_element_not_found("invisible link", arg1)
  end
end

Given /^I should see link with "([^"]*)" value "([^"]*)"$/ do |arg1, arg2|
  handle_element_not_found("link with #{arg1}", arg2) unless $BROWSER.element(:xpath =>  "//a[contains(@#{arg1}, '#{arg2}')]").exist?
end

Given /^I should not see link with "([^"]*)" value "([^"]*)"$/ do |arg1, arg2|
  handle_element_found("link with #{arg1}", arg2) if $BROWSER.element(:xpath =>  "//a[contains(@#{arg1}, '#{arg2}')]").exist?
end


################################################################################
# Text validators

Then /^I should see text "([^"]*)"$/ do |arg1|
  arg1 = update_variable(arg1)

  text_found = wait_until_text_found(arg1, 10)

  if !text_found
    #Possibly with different capitals?
    regexp_match = /#{arg1}/i.match($BROWSER.html)
    if regexp_match 
      $log.debug "Found '#{regexp_match}' by case insensitive regular expression '#{arg1}'"
    else
      handle_element_not_found("text", arg1)
    end
  end
end

Then /^I should see text "([^"]*)" or "([^"]*)"$/ do |arg1, arg2|
  arg1 = update_variable(arg1)
  arg2 = update_variable(arg2)

  text_found = wait_until_text_found(arg1, 10)
  text_found = wait_until_text_found(arg2, 10) unless text_found
  handle_element_not_found("text", "#{arg1} or #{arg2}") unless text_found
end

Then /^I should not see text "([^"]*)"$/ do |arg1|
  arg1 = update_variable(arg1)
  if $BROWSER.html.include? arg1
    raise "text: '#{arg1}' found on page"
  end
end


################################################################################
# Other validators

Then /^I should see a youtube video$/ do
  handle_element_not_found("video", "youtube") unless $BROWSER.html.include? "http://www.youtube"
end

Then /^I should be on url "([^"]*)"$/ do |arg1|
  if !$BROWSER.url.include? arg1
    handle_element_not_found("url", arg1)
  end
end

Then /^I take a screenshot$/ do
  take_screenshot()
end

Then /^I should see image from source "([^"]*)"$/ do |arg1|
  if !$BROWSER.img(:src => /#{arg1}/).exist?
    handle_element_not_found('image', arg1)
  elsif !$BROWSER.img(:src => /#{arg1}/).visible?
    handle_element_not_found('visible image', arg1)
  end
end

Then /^I should see button "([^\"]*)"$/ do |arg1|
  handle_element_not_found('button', arg1) unless find_button(arg1, 5)
end

Then /^field "([^"]*)" has value "([^"]*)"$/ do |arg1, arg2|
  field = find_input_field(arg1)
  if !field
    handle_element_not_found("Field", arg1)
  elsif !(field.value.include? arg2)
    handle_element_not_found("value for field #{arg1}", "#{arg2}. (Actual: #{field.value})")
  end
end

################################################################################
# Checkbox validators

Given /^checkbox "(.*?)" should be set$/ do |arg1|
  checkbox = find_checkbox(arg1)

  handle_element_not_found('checkbox', arg1) unless checkbox
  raise "Checkbox #{arg1} is set" unless checkbox.set?
end

Given /^checkbox "(.*?)" should be cleared$/ do |arg1|
  checkbox = find_checkbox(arg1)

  handle_element_not_found('checkbox', arg1) unless checkbox
  raise "Checkbox #{arg1} is set" if checkbox.set?
end


################################################################################
# XML validators

Given /^I get the xml data for "([^"]*)"$/ do |arg1|
  $XML_DATA = get_xml_data(arg1)
end

Given /^I store the xml data$/ do
  $XML_DATA = get_xml_data($BROWSER.url)
end

Given /^the xml response contains entry "([^"]*)"$/ do |arg1|
  raise "Cannot find #{arg1} in #{create_link('page', $BROWSER.url)}" unless $XML_DATA[arg1]
end

Given /^the xml response contains entry "([^"]*)" "([^"]*)"$/ do |arg1, arg2|
  raise "Cannot find #{arg2} in #{arg1} in #{create_link('page', $BROWSER.url)}" unless $XML_DATA[arg1].first[arg2]
end

Then /^the xml data should contain text "([^"]*)"$/ do |arg1|
  if !$XML_DATA.include? arg1
    handle_element_not_found("XML content", arg1)
  end
end
