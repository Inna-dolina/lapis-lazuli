################################################################################
# Copyright <%= config[:year] %> spriteCloud B.V. All rights reserved.
# Generated by LapisLazuli, version <%= config[:lapis_lazuli][:version] %>
# Author: "<%= config[:user] %>" <<%= config[:email] %>>

require 'rubygems'
require 'selenium-webdriver'
require 'watir-webdriver'
require "watir-webdriver/extensions/alerts"
require 'logger'
require 'uri'
require 'time'

require 'lapis_lazuli'
include LapisLazuli

################################################################################
# Start the logger
$log = Logger.new('log/selenium.log')

################################################################################
# Read the config file (load config_local.yml if it exists)
begin
  ALL_CONFIGS = YAML.load_file("config/config_local.yml")
rescue
  ALL_CONFIGS = YAML.load_file("config/config.yml")
end

################################################################################
# Load the global variables
$environment = ENV['TEST_ENV'] || ALL_CONFIGS['default_env']
$make_screenshot_on_failed_scenario = ALL_CONFIGS['make_screenshot_on_failed_scenario']

CONFIGS = ALL_CONFIGS[$environment]
$STEP_PAUSE_TIME = ALL_CONFIGS['step_pause_time'] rescue STEP_PAUSE_TIME = 0
$SITE = CONFIGS['home']
$SCREENSHOTS_DIR = ALL_CONFIGS['screenshots_dir']
$T_START = Time.now
$CURRENT_TIME = Time.now
$LOADTIMES = {}
$PAGE_CONTENT = {}
$XML_DATA = {}

################################################################################
# Launch the browser. Can be firefox, ie, chrome, safari. Defaults to firefox

# Define what browser to use from cucumber yml or from the command line.
$WEB_DRIVER = (ENV['BROWSER'] || 'firefox').downcase
case $WEB_DRIVER
  when 'firefox'
    $BROWSER = Watir::Browser.new :firefox
  when 'chrome'
    # Check Platform running script
    if RUBY_PLATFORM.downcase.include?("linux")
      Watir::Browser::Chrome.path = "/usr/lib/chromium-browser/chromium-browser"
    end
    $BROWSER = Watir::Browser.new :chrome
  when 'safari'
    $BROWSER = Watir::Browser.new :safari
  when 'ie'
    require 'rbconfig'
    if (RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/)
      $BROWSER = Watir::Browser.new :ie
    else
      raise "You can't run IE tests on non-Windows machine"
    end
  when 'ios'
    if RUBY_PLATFORM.downcase.include?("darwin")
      $BROWSER = Watir::Browser.new :iphone
    else
      raise "You can't run IOS tests on non-mac machine"
    end
else
  # Defaults to firefox
  $log.info("Couldn't determine the browser to use. Using firefox")
  $BROWSER = Watir::Browser.new :firefox
end

################################################################################
# Get the software versions.
# NOTE this is a custom function in methods.rb that needs to be written and returns a hash of version info
$VERSION_INFO = get_software_version_info()

# Display and log general information of the run
puts "Testrun: \n\t environment: \t\t #{$environment} \n\t Browser: \t\t #{ENV['BROWSER'] || 'firefox'}"
$log.debug "Testrun: \n\t environment: \t\t #{$environment} \n\t Browser: \t\t #{ENV['BROWSER'] || 'firefox'}"

# Displays version info if applicable
unless $VERSION_INFO.empty?
  $VERSION_INFO.each_key do |key, value|
    puts "\t#{key}: #{$VERSION_INFO[key]}"
    $log.debug "\t#{key} version: #{$VERSION_INFO[key]}"
  end
end

# A method to check if the page contains an error. Returns the error as a string.
# Here you can also insert custom checks. E.g detect if there is any error box and pass the content
def error_on_page?
  begin
    page_text = $BROWSER.html
    ALL_CONFIGS['error_strings'].each do |error|
      if page_text.scan(error)[0]
        return page_text.scan(error)[0]
      end
    end
  rescue
   $log.debug "Cannot read html for page #{$BROWSER.url}"
  end
  return false
end

# Actions that will happen before every scenario
# When you have an unique scenario name, this can be used for screenshots for example
Before do |scenario|
  $scenario_name = ''
  time_string = Time.now.strftime('%y%m%d_%H%M%S')
  $scenario_name = scenario.name
  $scenario_name = $scenario_name.gsub /^.*(\\|\/)/, ''
  # Finally, replace all non alphanumeric, underscore or periods with underscore
  $scenario_name = $scenario_name.gsub /[^\w\.\-]/, '_'
  # Lets 'sqeeze' all the multiple '_'s to just one '_' each :)
  $scenario_name = $scenario_name.squeeze('_')
  $scenario_name = time_string + "_" + $scenario_name
end

# This is executed after every step. Basically the step is failing,
# if the page contains one of the predefined strings (ERROR_STRINGS)
AfterStep do |scenario|
  errors_on_page = error_on_page?
  
  if scenario.failed? or errors_on_page
    problematic_page = $BROWSER.url

    exception_message = "'#{errors_on_page}' found on #{create_link('page', problematic_page)}."
    raise exception_message
  end

  #Sleep the time required
  sleep $STEP_PAUSE_TIME
end

# Can be used for debug purposes
AfterStep('@pause') do
  print "Press Return to continue"
  STDIN.getc
end

# This is executed after every scenario. Update loadtimes if they are given
After do |scenario|

  if scenario.failed? and $make_screenshot_on_failed_scenario
    take_screenshot()
  end
end

# Closing the browser after the test, no reason to leave them lying around
at_exit do
  $BROWSER.close
end
