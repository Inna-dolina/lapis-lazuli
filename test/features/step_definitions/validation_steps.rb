################################################################################
# Copyright 2014 spriteCloud B.V. All rights reserved.
# Generated by LapisLazuli, version 0.0.1
# Author: "Onno Steenbergen" <onno@steenbe.nl>

require 'lapis_lazuli'
ll = LapisLazuli::LapisLazuli.instance

Then(/(first|last|random|[0-9]+[a-z]+) (.*) should (not )?be the (first|last|[0-9]+[a-z]+) element on the page$/) do |index, type, differ, location_on_page|
	# Convert the type text to a symbol
	type = type.downcase.gsub(" ","_")

	pick = 0
	if ["first","last","random"].include?(index)
		pick = index.to_sym
	else
		pick = index.to_i - 1
	end
	# Options for find
	options = {}
	# Select the correct element
	options[type.to_sym] = {}
	# Pick the correct one
	options[:pick] = pick
	# Execute the find
	type_element = ll.browser.find(options)

	# All elements on the page
	body_elements = ll.browser.body.elements
	# Find the element we need
	page_element = nil
	if location_on_page == "first"
		page_element = body_elements.first
	elsif location_on_page == "last"
		page_element = body_elements.last
	else
		page_element = body_elements[location_on_page.to_i - 1]
	end

	# No page element
	if not page_element
		ll.error("Could not find an element on the page")
	# Elements are the same but it should not be
	elsif page_element == type_element and differ
		ll.error("Elements on the page are the same")
	# Elements are different but should be the same
	elsif page_element != type_element and not differ
		ll.error("Elements should be the same")
	end
end

Then(/(first|last|random|[0-9]+[a-z]+) (.*) should (not )?be present$/) do |index, type, hidden|
  # Convert the type text to a symbol
	type = type.downcase.gsub(" ","_")

	pick = 0
	if ["first","last","random"].include?(index)
		pick = index.to_sym
	else
		pick = index.to_i - 1
	end

	# Options for findAll
	options = {:present => false}
	# Select the correct element
	options[type.to_sym] = {}
	# Pick the correct one
	options[:pick] = pick
	# Execute the find
	type_element = ll.browser.find(options)
	# Find all
	all_elements = ll.browser.findAll(options)
	all_present = ll.browser.findAllPresent(options)

	if hidden and type_element.present?
		ll.error("Hidden element is visible")
	elsif not hidden and not type_element.present?
		ll.error("Element is hidden")
	elsif hidden and not type_element.present? and
		(not all_elements.include?(type_element) or all_present.include?(type_element))
		ll.error("Hidden element (not) found via findAll(Present)")
	elsif not hidden and type_element.present? and
		(not all_elements.include?(type_element) or not all_present.include?(type_element))
		ll.error("Visible element (not) found via findAll(Present)")
	end
end

Then(/^within (\d+) seconds I should see "(.*?)"( disappear)?$/) do |timeout, text, condition|
  if condition
		condition = :while
	else
		condition = :until
	end

	ll.browser.wait(
		:timeout => timeout,
		:text => text,
		:condition => condition
	)
end

Then(/^within (\d+) seconds I get an error waiting for "(.*?)"( disappear)?$/) do |timeout, text, condition|
	if condition
		condition = :while
	else
		condition = :until
	end

	begin
		ll.browser.wait(
			:timeout => timeout,
			:text => text,
			:condition => condition
		)
		ll.error("Didn't receive an error with this timeout")
	rescue
	end
end

Then(/^a screenshot should have been created$/) do
	# Check if there is a screenshot with the correct name
  folder = ll.config("screenshot_dir","screenshots")
	screenshot_prefix = ll.scenario.time[:timestamp] + "_" + ll.scenario.name
	if not Dir["#{folder}/#{screenshot_prefix}*"]
		ll.error("Didn't find a screenshot for this scenario")
	end
end

Then(/^I expect javascript errors$/) do
	ll.log.info("JS Errors not supported yet")
	pending
end
